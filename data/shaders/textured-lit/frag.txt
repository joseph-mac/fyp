#version 410

uniform sampler2D u_Texture;
uniform mat4 u_View;

varying vec2 ex_TexCoords;
varying vec3 ex_Normal;
varying vec3 ex_FragPos;

void main()
{
 vec3 lightPos = vec3(0, 10, 0);

 float ambientStrength = 0.1;
 vec3 norm = normalize(ex_Normal);
 vec3 lightColour = vec3(1, 1, 1);

 vec3 ambientLight = ambientStrength * lightColour;

 vec3 lightDir = normalize(lightPos - ex_FragPos);
 float diff = max(dot(norm, lightDir), 0);
 vec3 diffuseLight = vec3(1, 1, 1) * diff;

 vec3 viewPos = vec3(inverse(u_View) * vec4(0, 0, 0, 1));
 vec3 viewDir = normalize(viewPos - ex_FragPos);
 vec3 reflectDir = reflect(-lightDir, norm);
 float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
 vec3 specularLight = vec3(1, 1, 1) * spec;

 vec3 light = ambientLight + diffuseLight + specularLight;

 vec4 texture = texture2D(u_Texture, ex_TexCoords);
 gl_FragColor = vec4(light, 1.0) * texture;
}
